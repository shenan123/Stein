#大津法和迭代法
import cv2,os,struct
import matplotlib.pyplot as plt
import math
import numpy as np
import random

plt.rcParams['font.family']=['SimHei']
plt.rcParams['axes.unicode_minus']=False
def Otsu(image,T):
    hist=[0]*256
    shape=image.shape
    w0=0.0
    for i in range (shape[0]):
        for j in range (shape[1]):
            hist[image[i][j]]+=1
    for i in range (0,256):
        hist[i]=hist[i]/(shape[0]*shape[1])
    for i in range (0,T):
        w0+=hist[i]
    w1=1.0-w0
    u0=0.0
    u1=0.0
    for i in range(0,256):
        if i<=T:
            u0 = u0+((i * hist[i]) / w0)
        else:
            u1 = u1+((i * hist[i]) / w1)
    u=w0*u0+w1*u1
    T1=w0*w1*(u1-u0)*(u1-u0)
    return T1
img=cv2.imread(r'lina.png',0)
G1=np.zeros(img.shape,np.uint8)
G2=np.zeros(img.shape,np.uint8)
T1=np.mean(img)
diff=255
T0=0.01
while(diff>T0):
    _,G1=cv2.threshold(img,T1,255,cv2.THRESH_TOZERO_INV)
    _,G2=cv2.threshold(img,T1,255,cv2.THRESH_TOZERO)
    loc1=np.where(G1>0.001)
    loc2=np.where(G2>0.001)
    ave1=np.mean(G1[loc1])
    ave1=np.mean(G2[loc2])
    T2=(ave1+ave2)/2
    diff=abs(T1-T2)
    T1=T2
_,th=cv2.threshold(img,T1,255,cv2.THRESH_BINARY)
T1=0.0
T2=0.0
for i in range (1,256):
   if T1<Otsu(image,i):
       T1=Otsu(image,i)
       T2=i
_,th1=cv2.threshold(image,T2,255,cv2.THRESH_BINARY)
plt.figure()
plt.subplot(1,3,1)
plt.imshow(img,vmin=0,vmax=255,cmap=plt.cm.gray)
plt.title('Initial Image')
plt.subplot(1,3,2)
plt.imshow(th,cmap='gray')
plt.title('Iteration')
plt.subplot(1,3,3)
plt.imshow(th1,vmin=0,vmax=255,cmap=plt.cm.gray)
plt.title('Otsu')
plt.show()